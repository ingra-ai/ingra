generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String           @unique @db.VarChar(255)
  role            UserRole         @default(FREE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  activeSessions  ActiveSession[]
  magicLinkTokens MagicLinkToken[]
  tasks           Task[]
  oauthTokens     OAuthToken[]
  profile         Profile?
  phraseCode      PhraseCode?
  apiKeys         ApiKey[]
  functions       Function[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    String   @unique @db.Uuid
  userName  String   @unique @db.VarChar(255)
  timeZone      String   @db.VarChar(128) @default("America/New_York")
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model MagicLinkToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  otpCode   String?  @db.VarChar(6)
  userId    String   @db.Uuid
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ActiveSession {
  id        Int      @id @default(autoincrement())
  jwt       String   @unique
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  expiresAt DateTime
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  FREE
  PREMIUM
  ULTRA_PREMIUM
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String?
  status      TaskStatus
  priority    TaskPriority
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])

  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model PhraseCode {
  id      String   @id @default(uuid())
  code    String   @unique @db.VarChar(255)
  userId  String   @unique @db.Uuid
  expiresAt DateTime
  isAuthenticated  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user    User     @relation(fields: [userId], references: [id])

  @@map("phrase_codes")
}

model OAuthToken {
  id            String   @id @default(uuid())
  userId        String   @db.Uuid
  primaryEmailAddress String @db.VarChar(255)
  service       String   // e.g., "google", "microsoft", to identify the OAuth service
  accessToken   String
  refreshToken  String?
  idToken       String?
  scope         String
  tokenType     String   @db.VarChar(64) @default("Bearer")
  expiryDate    DateTime
  lastRefreshedAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id])

  @@unique([userId, primaryEmailAddress])
  @@map("oauth_tokens")
}

model ApiKey {
  id        String   @id @default(uuid())
  userId    String   @db.Uuid
  key       String   @unique @db.VarChar(255)
  lastUsedAt DateTime? @db.Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("api_keys")
}

model Function {
  id           String    @id @default(uuid()) @db.Uuid
  slug         String    @unique
  code         String    @db.Text
  isPrivate    Boolean   @default(true)
  ownerUserId  String    @unique @db.Uuid
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  owner        User      @relation(fields: [ownerUserId], references: [id])
  meta         FunctionMeta?

  @@map("functions")
  @@unique([ownerUserId, slug])
}

model FunctionMeta {
  id           String    @id @default(uuid())
  openApiSpec  Json

  // Relation
  functionId  String    @unique @db.Uuid
  function    Function  @relation(fields: [functionId], references: [id])

  @@map("function_meta")
}