generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                   String           @unique @db.VarChar(255)
  role                    UserRole         @default(FREE)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  activeSessions          ActiveSession[]
  magicLinkTokens         MagicLinkToken[]
  tasks                   Task[]
  oauthTokens             OAuthToken[]
  profile                 Profile?
  apiKeys                 ApiKey[]
  envVars                 EnvVars[]
  functions               Function[]
  functionReactions       FunctionReaction[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    String   @unique @db.Uuid
  userName  String   @unique @db.VarChar(255)
  timeZone  String   @default("America/New_York") @db.VarChar(128)
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model MagicLinkToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  otpCode   String?  @db.VarChar(6)
  userId    String   @db.Uuid
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ActiveSession {
  id        Int      @id @default(autoincrement())
  jwt       String   @unique
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  expiresAt DateTime
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  FREE
  PREMIUM
  ULTRA_PREMIUM
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  description String?
  status      TaskStatus
  priority    TaskPriority
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String       @db.Uuid
  user        User         @relation(fields: [userId], references: [id])

  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model OAuthToken {
  id                  String    @id @default(uuid())
  userId              String    @db.Uuid
  primaryEmailAddress String    @db.VarChar(255)
  service             String // e.g., "google", "microsoft", to identify the OAuth service
  accessToken         String
  refreshToken        String?
  idToken             String?
  scope               String
  tokenType           String    @default("Bearer") @db.VarChar(64)
  expiryDate          DateTime
  lastRefreshedAt     DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, primaryEmailAddress])
  @@map("oauth_tokens")
}

model ApiKey {
  id         String    @id @default(uuid())
  userId     String    @db.Uuid
  key        String    @unique @db.VarChar(255)
  lastUsedAt DateTime? @db.Timestamp
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])

  @@map("api_keys")
}

enum HttpVerb {
  GET
  POST
  PUT
  PATCH
  DELETE
}

model Function {
  id                 String             @id @default(uuid()) @db.Uuid
  slug               String             @db.VarChar(64)
  code               String             @db.Text
  isPrivate          Boolean            @default(true)
  isPublished        Boolean            @default(false)
  ownerUserId        String             @db.Uuid
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  httpVerb           HttpVerb           @default(GET)
  description        String             @default("") @db.VarChar(1024)
  arguments          FunctionArgument[]
  tags               FunctionTag[]

  // Relations
  owner User @relation(fields: [ownerUserId], references: [id])
  forksFrom FunctionFork[] @relation("ForkedFunctions")
  forksTo FunctionFork[] @relation("OriginalFunctions")
  reactions  FunctionReaction[]


  @@unique([ownerUserId, slug])
  @@map("functions")
}

model FunctionFork {
  id                 String      @id @default(uuid()) @db.Uuid
  originalFunctionId String      @db.Uuid
  forkedFunctionId   String      @db.Uuid
  createdAt          DateTime    @default(now())

  // Relations
  originalFunction Function @relation("OriginalFunctions", fields: [originalFunctionId], references: [id])
  forkedFunction   Function @relation("ForkedFunctions", fields: [forkedFunctionId], references: [id])

  @@unique([originalFunctionId, forkedFunctionId])
  @@map("function_forks")
}

model FunctionReaction {
  id         String   @id @default(uuid()) @db.Uuid
  functionId String   @db.Uuid
  userId     String   @db.Uuid
  type       ReactionType
  createdAt  DateTime @default(now())

  // Relations
  function Function @relation(fields: [functionId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([functionId, userId, type])
  @@map("function_reactions")
}

enum ReactionType {
  LIKE
  DISLIKE
}

model FunctionArgument {
  id           String  @id @default(uuid())
  functionId   String  @db.Uuid
  name         String
  type         String // Data type: 'string', 'number', 'boolean', etc.
  defaultValue String? // JSON string to support various default values
  description  String? @default("") @db.VarChar(1024)
  isRequired   Boolean @default(false)

  // Relations
  function Function @relation(fields: [functionId], references: [id])

  @@map("function_arguments")
}

model FunctionTag {
  id         String   @id @default(uuid())
  name       String   @db.VarChar(64)
  functionId String   @db.Uuid
  function   Function @relation(fields: [functionId], references: [id])

  @@map("function_tags")
}

model EnvVars {
  id          Int      @id @default(autoincrement())
  ownerUserId String   @db.Uuid
  key         String   @db.VarChar(64)
  value       String   @default("") @db.VarChar(512)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // Relations
  owner User @relation(fields: [ownerUserId], references: [id])

  @@unique([ownerUserId, key])
  @@map("env_vars")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  args      Json
  type      String   @db.VarChar(32)
  level     Int
  tag       String?  @db.VarChar(255)
}
