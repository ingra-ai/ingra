import { z } from 'zod';
enum TASK_STATUS {
  TODO = "TODO",
  IN_PROGRESS = "IN_PROGRESS",
  DONE = "DONE"
}

/**
 * @swagger
 * components:
 *   schemas:
 *    TaskStatus:
 *      type: string
 *      enum:
 *        - TODO
 *        - IN_PROGRESS
 *        - DONE
 *      description: Enumeration for possible statuses of a task.
 */
export const TaskStatus = z.nativeEnum(TASK_STATUS);

enum TASK_PRIORITY {
  LOW = "LOW",
  MEDIUM = "MEDIUM",
  HIGH = "HIGH"
}

/**
 * @swagger
 * components:
 *   schemas:
 *    TaskPriority:
 *      type: string
 *      enum:
 *        - LOW
 *        - MEDIUM
 *        - HIGH
 *      description: Enumeration for possible priority levels of a task.
 */
export const TaskPriority = z.nativeEnum(TASK_PRIORITY);

/**
 * @swagger
 * components:
 *   schemas:
 *    Task:
 *      type: object
 *      properties:
 *        id:
 *          type: integer
 *          format: int32
 *          description: Unique identifier for the task, automatically incremented.
 *        title:
 *          type: string
 *          description: Title of the task.
 *        description:
 *          type: string
 *          nullable: true
 *          description: Detailed description of the task, nullable.
 *        status:
 *          $ref: '#/components/schemas/TaskStatus'
 *          description: Current status of the task.
 *        priority:
 *          $ref: '#/components/schemas/TaskPriority'
 *          description: Priority level of the task.
 *        userId:
 *          type: string
 *          format: uuid
 *          description: Identifier for the user associated with the task. Optional.
 */
export const TaskSchema = z.object({
  id: z.number().optional(), // ID is optional because it's auto-generated by the database
  title: z.string()
    .max(100, { message: "Title must be less than 100 characters."}),
  description: z.string(),
  status: TaskStatus,
  priority: TaskPriority
});
